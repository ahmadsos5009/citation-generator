{"version":3,"file":"html-to-pdfmake-3f88a0980f2f45db383d.js","mappings":"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","sources":["webpack://citation-generator/./node_modules/html-to-pdfmake/index.js"],"sourcesContent":["// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\r\n// and https://github.com/bpampuch/pdfmake/issues/205\r\n\r\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\r\n\r\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\r\n//var util = require(\"util\"); // to debug\r\nfunction htmlToPdfMake(htmlText, options) {\r\n  'use strict';\r\n  this.wndw = (options && options.window ? options.window : window);\r\n  this.tableAutoSize = (options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false);\r\n  this.imagesByReference = (options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false);\r\n\r\n  // Used with the size attribute on the font elements to calculate relative font size\r\n  this.fontSizes = (options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]);\r\n\r\n  // set default styles\r\n  this.defaultStyles = {\r\n    b: {bold:true},\r\n    strong: {bold:true},\r\n    u: {decoration:'underline'},\r\n    del: {decoration:'lineThrough'},\r\n    s: {decoration: 'lineThrough'},\r\n    em: {italics:true},\r\n    i: {italics:true},\r\n    h1: {fontSize:24, bold:true, marginBottom:5},\r\n    h2: {fontSize:22, bold:true, marginBottom:5},\r\n    h3: {fontSize:20, bold:true, marginBottom:5},\r\n    h4: {fontSize:18, bold:true, marginBottom:5},\r\n    h5: {fontSize:16, bold:true, marginBottom:5},\r\n    h6: {fontSize:14, bold:true, marginBottom:5},\r\n    a: {color:'blue', decoration:'underline'},\r\n    strike: {decoration: 'lineThrough'},\r\n    p: {margin:[0, 5, 0, 10]},\r\n    ul: {marginBottom:5,marginLeft:5},\r\n    table: {marginBottom:5},\r\n    th: {bold:true, fillColor:'#EEEEEE'}\r\n  }\r\n\r\n  // store the references to the images\r\n  this.imagesRef = [];\r\n\r\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\r\n  this.changeDefaultStyles = function () {\r\n    for (var keyStyle in options.defaultStyles) {\r\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\r\n        // if we want to remove a default style\r\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\r\n          delete this.defaultStyles[keyStyle];\r\n        } else {\r\n          for (var k in options.defaultStyles[keyStyle]) {\r\n            // if we want to delete a specific property\r\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];\r\n            else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\r\n          }\r\n        }\r\n      } else {\r\n        // if we add default styles\r\n        this.defaultStyles[keyStyle] = {}\r\n        for (var ks in options.defaultStyles[keyStyle]) {\r\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (options && options.defaultStyles) {\r\n    this.changeDefaultStyles();\r\n  }\r\n\r\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\r\n  this.convertHtml = function(htmlText) {\r\n    // Create a HTML DOM tree out of html string\r\n    var parser = new this.wndw.DOMParser();\r\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\r\n\r\n    var docDef = this.parseElement(parsedHtml.body, []);\r\n\r\n    // remove first level\r\n    return docDef.stack || docDef.text;\r\n  }\r\n\r\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\r\n  this.parseElement = function(element, parents) {\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var nodeNameLowerCase = nodeName.toLowerCase();\r\n    var ret = {text:[]};\r\n    var text, needStack=false;\r\n    var dataset, i, key, _this=this;\r\n\r\n    // ignore some HTML tags\r\n    if (['COLGROUP','COL'].indexOf(nodeName) > -1) return '';\r\n\r\n    switch(element.nodeType) {\r\n      case 3: { // TEXT_NODE\r\n        if (element.textContent) {\r\n          text = element.textContent;\r\n          // check if we have 'white-space' in the parent's style\r\n          var styleParentTextNode = this.parseStyle(parents[parents.length-1], true);\r\n          var hasWhiteSpace = false;\r\n          for (i=0; i<styleParentTextNode.length; i++) {\r\n            if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\r\n              hasWhiteSpace=styleParentTextNode[i].value;\r\n              break;\r\n            }\r\n          }\r\n          // if no 'white-space' style, then remove blanks\r\n          if (!hasWhiteSpace) text = element.textContent.replace(/\\n(\\s+)?/g, \"\");\r\n          if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\r\n\r\n          // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\r\n          if (['TABLE','THEAD','TBODY','TFOOT','TR','UL','OL'].indexOf(parents[parents.length-1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n          if (text) {\r\n            ret = {'text':text};\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        return '';\r\n      }\r\n      case 1: { // ELEMENT_NODE\r\n        ret.nodeName = nodeName;\r\n        if (element.id) ret.id = element.id;\r\n        parents.push(element);\r\n\r\n        if (element.childNodes && element.childNodes.length>0) {\r\n          [].forEach.call(element.childNodes, function(child) {\r\n            var res = _this.parseElement(child, parents);\r\n            if (res) {\r\n              if (Array.isArray(res.text) && res.text.length===0) res.text='';\r\n              ret.text.push(res);\r\n            }\r\n          });\r\n          //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\r\n          // find if we need a 'stack' instead of a 'text'\r\n          needStack = this.searchForStack(ret);\r\n          if (needStack) {\r\n            ret.stack = ret.text.slice(0);\r\n            delete ret.text;\r\n          } else {\r\n            // apply all the inhirent classes and styles from the parents\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n          }\r\n        }\r\n        parents.pop();\r\n\r\n        switch(nodeName) {\r\n          case \"TABLE\":{\r\n            var rowIndex, cellIndex;\r\n            // the format for the table is table.body[[], [], …]\r\n            ret.table = {body:[]};\r\n            var tbodies = (ret.stack || ret.text);\r\n            if (Array.isArray(tbodies)) {\r\n              rowIndex = 0;\r\n              // Array with All Rows including THEAD\r\n              var allRows = [];\r\n              // for each THEAD / TBODY\r\n              tbodies.forEach(function(tbody) {\r\n                // for each row\r\n                var rows = (tbody.stack || tbody.text);\r\n                if (Array.isArray(rows)) {\r\n                  // Add rows to allRows\r\n                  allRows = allRows.concat(rows);\r\n                  rows.forEach(function(row) {\r\n                    var cells = (row.stack || row.text);\r\n                    // for each cell\r\n                    if (Array.isArray(cells)) {\r\n                      cellIndex = 0;\r\n                      ret.table.body[rowIndex] = [];\r\n                      cells.forEach(function(cell) {\r\n                        ret.table.body[rowIndex].push(cell);\r\n\r\n                        // do we have a colSpan?\r\n                        // if yes, insert empty cells due to colspan\r\n                        if (cell.colSpan) {\r\n                          i = cell.colSpan;\r\n                          // do we have a rowSpan in addition of the colSpan?\r\n                          _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                          while (--i > 0) {\r\n                            ret.table.body[rowIndex].push({text:''});\r\n                            // keep adding empty cell due to rowspan\r\n                            _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                            cellIndex++;\r\n                          }\r\n                        } else {\r\n                          // do we have a rowSpan ?\r\n                          _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                        }\r\n\r\n                        cellIndex++;\r\n                      });\r\n                      rowIndex++;\r\n                    }\r\n                 });\r\n                }\r\n              });\r\n            }\r\n\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n\r\n            // if option tableAutoSize, then we try to apply the correct width/height on the table\r\n            if (this.tableAutoSize) {\r\n              var cellsWidths = [];\r\n              var cellsHeights = [];\r\n              var tableWidths = [];\r\n              var tableHeights = [];\r\n\r\n              ret.table.body.forEach(function(row, rowIndex) {\r\n                cellsWidths.push([]);\r\n                cellsHeights.push([]);\r\n                row.forEach(function(cell) {\r\n                  // we want to remember the different sizes\r\n                  var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\r\n                  var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\r\n                  // check if we have colspan or rowspan\r\n                  // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\r\n                  if (width !== 'auto' && cell.colSpan) {\r\n                    if (!isNaN(width)) width /= cell.colSpan;\r\n                    else width = 'auto';\r\n                  }\r\n                  if (height !== 'auto' && cell.rowSpan) {\r\n                    if (!isNaN(height)) height /= cell.colSpan;\r\n                    else height = 'auto';\r\n                  }\r\n                  cellsWidths[rowIndex].push(width);\r\n                  cellsHeights[rowIndex].push(height);\r\n                });\r\n              });\r\n\r\n              // determine the max width for each cell\r\n              cellsWidths.forEach(function(row) {\r\n                row.forEach(function(cellWidth, cellIndex) {\r\n                  var type = typeof tableWidths[cellIndex];\r\n                  if (type === \"undefined\" || (cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex]) || (cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto')) {\r\n                    tableWidths[cellIndex] = cellWidth;\r\n                  }\r\n                });\r\n              });\r\n              // determine the max height for each row\r\n              cellsHeights.forEach(function(row, rowIndex) {\r\n                row.forEach(function(cellHeight) {\r\n                  var type = typeof tableHeights[rowIndex];\r\n                  if (type === \"undefined\" || (cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex]) || (cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto')) {\r\n                    tableHeights[rowIndex] = cellHeight;\r\n                  }\r\n                });\r\n              });\r\n              if (tableWidths.length > 0) ret.table.widths = tableWidths;\r\n              if (tableHeights.length > 0) ret.table.heights = tableHeights;\r\n            }\r\n\r\n            // check if we have some data-pdfmake to apply\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\r\n              dataset = element.dataset.pdfmake;\r\n              if (dataset.charAt(1) === \"'\") dataset=dataset.replace(/'/g,'\"');\r\n              try {\r\n                dataset = JSON.parse(dataset);\r\n                for (key in dataset) {\r\n                  if (key === \"layout\") {\r\n                    ret.layout = dataset[key];\r\n                  } else {\r\n                    ret.table[key] = dataset[key];\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case \"TH\":\r\n          case \"TD\":{\r\n            if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\")*1;\r\n            if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\")*1;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"SVG\": {\r\n            ret = {\r\n              svg:element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\r\n              nodeName:'SVG',\r\n              style:['html-svg']\r\n            }\r\n            break;\r\n          }\r\n          case \"BR\": {\r\n            // for BR we return '\\n'\r\n            ret.text = [{text:'\\n'}];\r\n            break;\r\n          }\r\n          case \"SUB\":\r\n          case \"SUP\": {\r\n            ret[nodeName.toLowerCase()] = { offset: '30%', fontSize: 8 };\r\n            break;\r\n          }\r\n          case \"HR\": {\r\n            // default style for the HR\r\n            var styleHR = {\r\n              width: 514,\r\n              type: \"line\",\r\n              margin: [0, 12, 0, 12],\r\n              thickness: 0.5,\r\n              color: \"#000000\",\r\n              left: 0\r\n            };\r\n            // we can override the default HR style with \"data-pdfmake\"\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              dataset = JSON.parse(element.dataset.pdfmake);\r\n              for (key in dataset) {\r\n                styleHR[key] = dataset[key];\r\n              }\r\n            }\r\n\r\n            ret.margin = styleHR.margin;\r\n            ret.canvas = [\r\n              {\r\n                type: styleHR.type,\r\n                x1: styleHR.left,\r\n                y1: 0,\r\n                x2: styleHR.width,\r\n                y2: 0,\r\n                lineWidth: styleHR.thickness,\r\n                lineColor: styleHR.color\r\n              }\r\n            ];\r\n            delete ret.text;\r\n\r\n            break;\r\n          }\r\n          case \"OL\":\r\n          case \"UL\": {\r\n            ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            // check if we have `start`\r\n            if (element.getAttribute(\"start\")) {\r\n              ret.start = element.getAttribute(\"start\")*1;\r\n            }\r\n            // check if we have \"type\"\r\n            switch (element.getAttribute(\"type\")) {\r\n              case 'A': ret.type = 'upper-alpha'; break;\r\n              case 'a': ret.type = 'lower-alpha'; break;\r\n              case 'I': ret.type = 'upper-roman'; break;\r\n              case 'i': ret.type = 'lower-roman'; break;\r\n            }\r\n            \r\n            // check if we have `list-style-type` or `list-style`\r\n            if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\r\n            break;\r\n          }\r\n          case \"LI\": {\r\n            // if it's a stack, then check if the last child has a \"text\"\r\n            if (ret.stack && !ret.stack[ret.stack.length-1].text) {\r\n              // if not, we restructure our node\r\n              text = ret.stack.slice(0, -1);\r\n              ret = [ {\"text\": text}, ret.stack[ret.stack.length-1] ];\r\n            }\r\n            break;\r\n          }\r\n          case \"IMG\": {\r\n            if (this.imagesByReference) {\r\n              var src = element.getAttribute(\"src\");\r\n              var index = this.imagesRef.indexOf(src);\r\n              if (index>-1) ret.image = 'img_ref_'+index;\r\n              else {\r\n                ret.image = 'img_ref_'+this.imagesRef.length;\r\n                this.imagesRef.push(src);\r\n              }\r\n            } else {\r\n              ret.image = element.getAttribute(\"src\");\r\n            }\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"A\": {\r\n            // the link must be applied to the deeper `text`\r\n            var setLink = function(pointer, href) {\r\n              pointer = pointer || {text:''}; // for link without any text\r\n              if (Array.isArray(pointer.text)) {\r\n                return setLink(pointer.text[0], href);\r\n              }\r\n              // if 'href' starts with '#' then it's an internal link\r\n              if (href.indexOf('#') === 0) pointer.linkToDestination=href.slice(1);\r\n              else pointer.link = href;\r\n              pointer.nodeName = \"A\";\r\n              return pointer;\r\n            }\r\n            if (element.getAttribute(\"href\")) {\r\n              ret = setLink(ret, element.getAttribute(\"href\"));\r\n            }\r\n            break;\r\n          }\r\n          case \"FONT\": {\r\n            if (element.getAttribute(\"color\")) {\r\n              ret.color = this.parseColor(element.getAttribute(\"color\"));\r\n            }\r\n            // Checking if the element has a size attribute\r\n            if (element.getAttribute(\"size\")) {\r\n              // Getting and sanitizing the size value: it should be included between 1 and 7\r\n              var size = Math.min(Math.max(1, parseInt(element.getAttribute(\"size\"))), 7);\r\n\r\n              // Getting the relative fontsize\r\n              var fontSize = Math.max(this.fontSizes[0], this.fontSizes[size - 1]);\r\n\r\n              // Assigning the font size\r\n              ret.fontSize = fontSize;\r\n            }\r\n\r\n            // Applying inherited styles\r\n            ret = this.applyStyle({\r\n              ret: ret,\r\n              parents: parents.concat([element]),\r\n            });\r\n            break;\r\n          }\r\n          default: {\r\n            // handle other cases\r\n            if (options && typeof options.customTag === \"function\") {\r\n              ret = options.customTag.call(this, {element:element, parents:parents, ret:ret});\r\n            }\r\n          }\r\n        }\r\n\r\n        // reduce the number of JSON properties\r\n        if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\r\n          ret.text = ret.text[0].text;\r\n        }\r\n\r\n        // check if we have some data-pdfmake to apply\r\n        if (['HR','TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\r\n          dataset = JSON.parse(element.dataset.pdfmake);\r\n          for (key in dataset) {\r\n            ret[key] = dataset[key];\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  this.searchForStack = function(ret) {\r\n    if (Array.isArray(ret.text)) {\r\n      for (var i=0; i<ret.text.length; i++) {\r\n        if (ret.text[i].stack || ['P','DIV','TABLE','SVG','UL','OL','IMG','H1','H2','H3','H4','H5','H6'].indexOf(ret.text[i].nodeName) > -1) return true;\r\n        if (this.searchForStack(ret.text[i]) === true) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Add empty cells due to rowspan\r\n   *\r\n   * @param {Object} params\r\n   *   @param {Array} rows\r\n   *   @param {Object} cell\r\n   *   @param {Number} rowIndex Current row index\r\n   *   @param {Number} cellIndex Current cell index\r\n   */\r\n  this.setRowSpan = function(params) {\r\n    var cells;\r\n    if (params.cell.rowSpan) {\r\n      for (var i=1; i <= params.cell.rowSpan-1; i++) {\r\n        cells = (params.rows[params.rowIndex+i].text || params.rows[params.rowIndex+i].stack);\r\n        cells.splice(params.cellIndex, 0, {text:''});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\r\n  this.applyStyle = function(params) {\r\n    var cssClass = [];\r\n    var lastIndex = params.parents.length-1;\r\n    var _this = this;\r\n    params.parents.forEach(function(parent, parentIndex) {\r\n      // classes\r\n      var parentNodeName = parent.nodeName.toLowerCase();\r\n      var htmlClass = 'html-' + parentNodeName;\r\n      if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\r\n      var parentClass = (parent.getAttribute(\"class\")||\"\").split(' ');\r\n      parentClass.forEach(function(p) {\r\n        if (p) cssClass.push(p);\r\n      });\r\n      // styles\r\n      var style;\r\n      // not all the CSS properties should be inherent\r\n      var ignoreNonDescendentProperties = (parentIndex!==lastIndex);\r\n      // 1) the default styles\r\n      if (_this.defaultStyles[parentNodeName]) {\r\n        for (style in _this.defaultStyles[parentNodeName]) {\r\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\r\n            if (!ignoreNonDescendentProperties ||\r\n                (ignoreNonDescendentProperties &&\r\n                  style.indexOf('margin') === -1 &&\r\n                  style.indexOf('border') === -1\r\n                )\r\n               ) {\r\n              // 'decoration' can be an array\r\n              if (style === 'decoration') {\r\n                if (!Array.isArray(params.ret[style])) params.ret[style]=[];\r\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\r\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\r\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\r\n                }\r\n              } else {\r\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 2) element's style\r\n      // we want TD/TH to receive descendant properties from TR\r\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties=false;\r\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\r\n      style.forEach(function(stl) {\r\n        // 'decoration' can be an array\r\n        if (stl.key === \"decoration\") {\r\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key]=[];\r\n          params.ret[stl.key].push(stl.value);\r\n        } else {\r\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\r\n          // then we should change the correct index in `params.ret.margin` to reflect it\r\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\r\n            // order: left | top | right | bottom\r\n            switch(stl.key) {\r\n              case \"marginLeft\": params.ret.margin[0]=stl.value; break;\r\n              case \"marginTop\": params.ret.margin[1]=stl.value; break;\r\n              case \"marginRight\": params.ret.margin[2]=stl.value; break;\r\n              case \"marginBottom\": params.ret.margin[3]=stl.value; break;\r\n            }\r\n          } else {\r\n            params.ret[stl.key] = stl.value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    params.ret.style = cssClass;\r\n    return params.ret;\r\n  }\r\n\r\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\r\n  this.parseStyle = function(element, ignoreProperties) {\r\n    var style = element.getAttribute(\"style\") || \"\";\r\n    style = style.split(';');\r\n    // check if we have \"width\" or \"height\"\r\n    if (element.getAttribute(\"width\")) {\r\n      style.unshift(\"width:\" + element.getAttribute(\"width\") + \"px\");\r\n    }\r\n    if (element.getAttribute(\"height\")) {\r\n      style.unshift(\"height:\" + element.getAttribute(\"height\") + \"px\");\r\n    }\r\n    var styleDefs = style.map(function(style) { return style.toLowerCase().split(':') });\r\n    var ret = [];\r\n    var borders = []; // special treatment for borders\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var _this=this;\r\n    styleDefs.forEach(function(styleDef) {\r\n      if (styleDef.length===2) {\r\n        var key = styleDef[0].trim();\r\n        var value = styleDef[1].trim();\r\n        switch (key) {\r\n          case \"margin\": {\r\n            if (ignoreProperties) break;\r\n            // pdfMake uses a different order than CSS\r\n            value = value.split(' ');\r\n            if (value.length===1) value=[value[0], value[0], value[0], value[0]];\r\n            else if (value.length===2) value=[value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\r\n            else if (value.length===3) value=[value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\r\n            else if (value.length===4) value=[value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\r\n\r\n            // we now need to convert to PT\r\n            value.forEach(function(val, i) {\r\n              value[i] = _this.convertToUnit(val);\r\n            });\r\n            // ignore if we have a FALSE in the table\r\n            if (value.indexOf(false) === -1) ret.push({key:key, value:value});\r\n            break;\r\n          }\r\n          case \"text-align\": {\r\n            ret.push({key:\"alignment\", value:value});\r\n            break;\r\n          }\r\n          case \"font-weight\": {\r\n            if (value === \"bold\") ret.push({key:\"bold\", value:true});\r\n            break;\r\n          }\r\n          case \"text-decoration\": {\r\n            ret.push({key:\"decoration\", value:_this.toCamelCase(value)})\r\n            break;\r\n          }\r\n          case \"font-style\": {\r\n            if (value===\"italic\") ret.push({key:\"italics\", value:true});\r\n            break;\r\n          }\r\n          case \"font-family\": {\r\n            ret.push({key:\"font\", value:value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g,\"\").replace(/^([a-z])/g, function (g) { return g[0].toUpperCase() }).replace(/ ([a-z])/g, function (g) { return g[1].toUpperCase() })});\r\n            break;\r\n          }\r\n          case \"color\": {\r\n            ret.push({key:\"color\", value:_this.parseColor(value)})\r\n            break;\r\n          }\r\n          case \"background-color\": {\r\n            // if TH/TD and key is 'background', then we use 'fillColor' instead\r\n            ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\"), value:_this.parseColor(value)})\r\n            break;\r\n          }\r\n          case \"text-indent\": {\r\n            ret.push({key:\"leadingIndent\", value:_this.convertToUnit(value)});\r\n            break;\r\n          }\r\n          case \"white-space\": {\r\n            ret.push({key:\"preserveLeadingSpaces\", value:(value==='break-spaces' || value.slice(0,3) === 'pre')});\r\n            break;\r\n          }\r\n          default: {\r\n            // for borders\r\n            if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\r\n              if (!ignoreProperties) borders.push({key:key, value:value});\r\n            } else {\r\n              // ignore some properties\r\n              if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\r\n              // padding is not supported by PDFMake\r\n              if (key.indexOf(\"padding\") === 0) break;\r\n              if (key.indexOf(\"-\") > -1) key=_this.toCamelCase(key);\r\n              if (value) {\r\n                // convert value to a 'pt' when possible\r\n                var parsedValue = _this.convertToUnit(value);\r\n                ret.push({key:key, value:(parsedValue === false ? value : parsedValue)});\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // for borders\r\n    if (borders.length > 0) {\r\n      // we have to merge together the borders in two properties\r\n      var border = []; // array of boolean\r\n      var borderColor = []; // array of colors\r\n      borders.forEach(function(b) {\r\n        // we have 3 properties: width style color\r\n        var properties = b.value.split(' ');\r\n        var width = properties[0].replace(/(\\d+)(\\.\\d+)?([^\\d]+)/g,\"$1$2 \").trim();\r\n        var index = -1, i;\r\n        if (b.key.indexOf('-left') > -1) index=0;\r\n        else if (b.key.indexOf('-top') > -1) index=1;\r\n        else if (b.key.indexOf('-right') > -1) index=2;\r\n        else if (b.key.indexOf('-bottom') > -1) index=3;\r\n        // for the width\r\n        if (index > -1) {\r\n          border[index] = (width > 0);\r\n        } else {\r\n          for (i=0; i<4; i++) border[i] = (width > 0);\r\n        }\r\n        // for the color\r\n        if (properties.length > 2) {\r\n          var color = properties.slice(2).join(' ');\r\n          if (index > -1) {\r\n            borderColor[index] = _this.parseColor(color);\r\n          } else {\r\n            for (i=0; i<4; i++) borderColor[i] = _this.parseColor(color);\r\n          }\r\n        }\r\n      });\r\n      // fill the gaps\r\n      for (var i=0; i<4; i++) {\r\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i]=true;\r\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i]='#000000';\r\n      }\r\n      if (border.length > 0) ret.push({key:'border', value:border});\r\n      if (borderColor.length > 0) ret.push({key:'borderColor', value:borderColor});\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  this.toCamelCase = function(str) {\r\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\r\n  }\r\n\r\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\r\n  this.parseColor = function(color) {\r\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$');\r\n\r\n    // e.g. `#fff` or `#ff0048`\r\n    var rgbRegex = new RegExp('^rgb\\\\((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)\\\\)$');\r\n\r\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0)\r\n    var nameRegex = new RegExp('^[a-z]+$');\r\n\r\n    if (haxRegex.test(color)) {\r\n      return color;\r\n    } else if (rgbRegex.test(color)) {\r\n      var decimalColors = rgbRegex.exec(color).slice(1);\r\n      for (var i = 0; i < 3; i++) {\r\n        var decimalValue = +decimalColors[i];\r\n        if (decimalValue > 255) {\r\n          decimalValue = 255;\r\n        }\r\n        var hexString = '0' + decimalValue.toString(16);\r\n        hexString = hexString.slice(-2);\r\n        decimalColors[i] = hexString;\r\n      }\r\n      return '#' + decimalColors.join('');\r\n    } else if (nameRegex.test(color)) {\r\n      return (color === \"transparent\" ? \"white\" : color);\r\n    } else {\r\n      console.error('Could not parse color \"' + color + '\"');\r\n      return color;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\r\n  this.convertToUnit = function(val) {\r\n    // if it's just a number, then return it\r\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val*1;\r\n    var mtch = (val+\"\").trim().match(/^(\\d+(\\.\\d+)?)(pt|px|r?em|cm)$/);\r\n    // if we don't have a number with supported units, then return false\r\n    if (!mtch) return false;\r\n    val = mtch[1];\r\n    switch(mtch[3]) {\r\n      case 'px':{\r\n        val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\r\n        break;\r\n      }\r\n      case 'em':\r\n      case 'rem':{\r\n        val *= 12; // default font-size is 12pt\r\n        break;\r\n      }\r\n      case 'cm':{\r\n        val = Math.round(val * 28.34646); // 1cm => 28.34646\r\n        break;\r\n      }\r\n    }\r\n    return val*1;\r\n  }\r\n\r\n  var result = this.convertHtml(htmlText);\r\n  // if we only pass a string without HTML code\r\n  if (typeof result === \"string\") result={text:result};\r\n  // if images by reference\r\n  if (this.imagesByReference) {\r\n    result = {content:result, images:{}};\r\n    this.imagesRef.forEach(function(src, i) {\r\n      result.images['img_ref_'+i] = src;\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = function(htmlText, options) {\r\n  return new htmlToPdfMake(htmlText, options);\r\n}\r\n"],"names":["htmlToPdfMake","htmlText","options","this","wndw","window","tableAutoSize","imagesByReference","fontSizes","Array","isArray","defaultStyles","b","bold","strong","u","decoration","del","s","em","italics","i","h1","fontSize","marginBottom","h2","h3","h4","h5","h6","a","color","strike","p","margin","ul","marginLeft","table","th","fillColor","imagesRef","changeDefaultStyles","keyStyle","hasOwnProperty","k","ks","convertHtml","parsedHtml","DOMParser","parseFromString","docDef","parseElement","body","stack","text","element","parents","dataset","key","nodeName","toUpperCase","nodeNameLowerCase","toLowerCase","ret","_this","indexOf","nodeType","textContent","styleParentTextNode","parseStyle","length","hasWhiteSpace","value","replace","replaceText","applyStyle","id","push","childNodes","forEach","call","child","res","searchForStack","slice","pop","rowIndex","cellIndex","tbodies","allRows","tbody","rows","concat","row","cells","cell","colSpan","setRowSpan","cellsWidths","cellsHeights","tableWidths","tableHeights","width","height","isNaN","rowSpan","cellWidth","type","cellHeight","widths","heights","pdfmake","charAt","JSON","parse","layout","e","console","error","getAttribute","svg","outerHTML","style","offset","styleHR","thickness","left","canvas","x1","y1","x2","y2","lineWidth","lineColor","start","listStyle","listStyleType","src","index","image","setLink","pointer","href","linkToDestination","link","parseColor","size","Math","min","max","parseInt","customTag","params","splice","cssClass","lastIndex","parent","parentIndex","parentNodeName","htmlClass","unshift","split","ignoreNonDescendentProperties","stringify","stl","ignoreProperties","styleDefs","map","borders","styleDef","trim","val","convertToUnit","toCamelCase","g","parsedValue","border","borderColor","properties","join","str","haxRegex","RegExp","rgbRegex","nameRegex","test","decimalColors","exec","decimalValue","hexString","toString","parseFloat","isFinite","mtch","match","round","result","content","images","module","exports"],"sourceRoot":""}