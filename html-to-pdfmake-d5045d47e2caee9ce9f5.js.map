{"version":3,"file":"html-to-pdfmake-d5045d47e2caee9ce9f5.js","mappings":"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","sources":["webpack://citation-generator/./node_modules/html-to-pdfmake/index.js"],"sourcesContent":["// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\n// and https://github.com/bpampuch/pdfmake/issues/205\n\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\n\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\n//var util = require(\"util\"); // to debug\nfunction htmlToPdfMake(htmlText, options) {\n  'use strict';\n\n  this.wndw = options && options.window ? options.window : window;\n  this.tableAutoSize = options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false;\n  this.imagesByReference = options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false; // Used with the size attribute on the font elements to calculate relative font size\n\n  this.fontSizes = options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]; // set default styles\n\n  this.defaultStyles = {\n    b: {\n      bold: true\n    },\n    strong: {\n      bold: true\n    },\n    u: {\n      decoration: 'underline'\n    },\n    del: {\n      decoration: 'lineThrough'\n    },\n    s: {\n      decoration: 'lineThrough'\n    },\n    em: {\n      italics: true\n    },\n    i: {\n      italics: true\n    },\n    h1: {\n      fontSize: 24,\n      bold: true,\n      marginBottom: 5\n    },\n    h2: {\n      fontSize: 22,\n      bold: true,\n      marginBottom: 5\n    },\n    h3: {\n      fontSize: 20,\n      bold: true,\n      marginBottom: 5\n    },\n    h4: {\n      fontSize: 18,\n      bold: true,\n      marginBottom: 5\n    },\n    h5: {\n      fontSize: 16,\n      bold: true,\n      marginBottom: 5\n    },\n    h6: {\n      fontSize: 14,\n      bold: true,\n      marginBottom: 5\n    },\n    a: {\n      color: 'blue',\n      decoration: 'underline'\n    },\n    strike: {\n      decoration: 'lineThrough'\n    },\n    p: {\n      margin: [0, 5, 0, 10]\n    },\n    ul: {\n      marginBottom: 5,\n      marginLeft: 5\n    },\n    table: {\n      marginBottom: 5\n    },\n    th: {\n      bold: true,\n      fillColor: '#EEEEEE'\n    }\n  }; // store the references to the images\n\n  this.imagesRef = [];\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\n\n  this.changeDefaultStyles = function () {\n    for (var keyStyle in options.defaultStyles) {\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\n        // if we want to remove a default style\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\n          delete this.defaultStyles[keyStyle];\n        } else {\n          for (var k in options.defaultStyles[keyStyle]) {\n            // if we want to delete a specific property\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\n          }\n        }\n      } else {\n        // if we add default styles\n        this.defaultStyles[keyStyle] = {};\n\n        for (var ks in options.defaultStyles[keyStyle]) {\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\n        }\n      }\n    }\n  };\n\n  if (options && options.defaultStyles) {\n    this.changeDefaultStyles();\n  }\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\n\n\n  this.convertHtml = function (htmlText) {\n    // Create a HTML DOM tree out of html string\n    var parser = new this.wndw.DOMParser();\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\n    var docDef = this.parseElement(parsedHtml.body, []); // remove first level\n\n    return docDef.stack || docDef.text;\n  };\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\n\n\n  this.parseElement = function (element, parents) {\n    var nodeName = element.nodeName.toUpperCase();\n    var nodeNameLowerCase = nodeName.toLowerCase();\n    var ret = {\n      text: []\n    };\n    var text,\n        needStack = false;\n\n    var dataset,\n        i,\n        key,\n        _this = this; // ignore some HTML tags\n\n\n    if (['COLGROUP', 'COL'].indexOf(nodeName) > -1) return '';\n\n    switch (element.nodeType) {\n      case 3:\n        {\n          // TEXT_NODE\n          if (element.textContent) {\n            text = element.textContent; // check if we have 'white-space' in the parent's style\n\n            var styleParentTextNode = this.parseStyle(parents[parents.length - 1], true);\n            var hasWhiteSpace = false;\n\n            for (i = 0; i < styleParentTextNode.length; i++) {\n              if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\n                hasWhiteSpace = styleParentTextNode[i].value;\n                break;\n              }\n            } // if no 'white-space' style, then remove blanks\n\n\n            if (!hasWhiteSpace) text = element.textContent.replace(/\\n(\\s+)?/g, \"\");\n            if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents); // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\n\n            if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR', 'UL', 'OL'].indexOf(parents[parents.length - 1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n            if (text) {\n              ret = {\n                'text': text\n              };\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n              return ret;\n            }\n          }\n\n          return '';\n        }\n\n      case 1:\n        {\n          // ELEMENT_NODE\n          ret.nodeName = nodeName;\n          if (element.id) ret.id = element.id;\n          parents.push(element);\n\n          if (element.childNodes && element.childNodes.length > 0) {\n            [].forEach.call(element.childNodes, function (child) {\n              var res = _this.parseElement(child, parents);\n\n              if (res) {\n                if (Array.isArray(res.text) && res.text.length === 0) res.text = '';\n                ret.text.push(res);\n              }\n            }); //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\n            // find if we need a 'stack' instead of a 'text'\n\n            needStack = this.searchForStack(ret);\n\n            if (needStack) {\n              ret.stack = ret.text.slice(0);\n              delete ret.text;\n            } else {\n              // apply all the inhirent classes and styles from the parents\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n            }\n          }\n\n          parents.pop();\n\n          switch (nodeName) {\n            case \"TABLE\":\n              {\n                var rowIndex, cellIndex; // the format for the table is table.body[[], [], …]\n\n                ret.table = {\n                  body: []\n                };\n                var tbodies = ret.stack || ret.text;\n\n                if (Array.isArray(tbodies)) {\n                  rowIndex = 0; // Array with All Rows including THEAD\n\n                  var allRows = []; // for each THEAD / TBODY\n\n                  tbodies.forEach(function (tbody) {\n                    // for each row\n                    var rows = tbody.stack || tbody.text;\n\n                    if (Array.isArray(rows)) {\n                      // Add rows to allRows\n                      allRows = allRows.concat(rows);\n                      rows.forEach(function (row) {\n                        var cells = row.stack || row.text; // for each cell\n\n                        if (Array.isArray(cells)) {\n                          cellIndex = 0;\n                          ret.table.body[rowIndex] = [];\n                          cells.forEach(function (cell) {\n                            ret.table.body[rowIndex].push(cell); // do we have a colSpan?\n                            // if yes, insert empty cells due to colspan\n\n                            if (cell.colSpan) {\n                              i = cell.colSpan; // do we have a rowSpan in addition of the colSpan?\n\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n\n                              while (--i > 0) {\n                                ret.table.body[rowIndex].push({\n                                  text: ''\n                                }); // keep adding empty cell due to rowspan\n\n                                _this.setRowSpan({\n                                  rows: allRows,\n                                  cell: cell,\n                                  rowIndex: rowIndex,\n                                  cellIndex: cellIndex\n                                });\n\n                                cellIndex++;\n                              }\n                            } else {\n                              // do we have a rowSpan ?\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n                            }\n\n                            cellIndex++;\n                          });\n                          rowIndex++;\n                        }\n                      });\n                    }\n                  });\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // if option tableAutoSize, then we try to apply the correct width/height on the table\n\n                if (this.tableAutoSize) {\n                  var cellsWidths = [];\n                  var cellsHeights = [];\n                  var tableWidths = [];\n                  var tableHeights = [];\n                  ret.table.body.forEach(function (row, rowIndex) {\n                    cellsWidths.push([]);\n                    cellsHeights.push([]);\n                    row.forEach(function (cell) {\n                      // we want to remember the different sizes\n                      var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\n                      var height = typeof cell.height !== 'undefined' ? cell.height : 'auto'; // check if we have colspan or rowspan\n                      // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\n\n                      if (width !== 'auto' && cell.colSpan) {\n                        if (!isNaN(width)) width /= cell.colSpan;else width = 'auto';\n                      }\n\n                      if (height !== 'auto' && cell.rowSpan) {\n                        if (!isNaN(height)) height /= cell.colSpan;else height = 'auto';\n                      }\n\n                      cellsWidths[rowIndex].push(width);\n                      cellsHeights[rowIndex].push(height);\n                    });\n                  }); // determine the max width for each cell\n\n                  cellsWidths.forEach(function (row) {\n                    row.forEach(function (cellWidth, cellIndex) {\n                      var type = typeof tableWidths[cellIndex];\n\n                      if (type === \"undefined\" || cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex] || cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto') {\n                        tableWidths[cellIndex] = cellWidth;\n                      }\n                    });\n                  }); // determine the max height for each row\n\n                  cellsHeights.forEach(function (row, rowIndex) {\n                    row.forEach(function (cellHeight) {\n                      var type = typeof tableHeights[rowIndex];\n\n                      if (type === \"undefined\" || cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex] || cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto') {\n                        tableHeights[rowIndex] = cellHeight;\n                      }\n                    });\n                  });\n                  if (tableWidths.length > 0) ret.table.widths = tableWidths;\n                  if (tableHeights.length > 0) ret.table.heights = tableHeights;\n                } // check if we have some data-pdfmake to apply\n\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\n                  dataset = element.dataset.pdfmake;\n                  if (dataset.charAt(1) === \"'\") dataset = dataset.replace(/'/g, '\"');\n\n                  try {\n                    dataset = JSON.parse(dataset);\n\n                    for (key in dataset) {\n                      if (key === \"layout\") {\n                        ret.layout = dataset[key];\n                      } else {\n                        ret.table[key] = dataset[key];\n                      }\n                    }\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }\n\n                break;\n              }\n\n            case \"TH\":\n            case \"TD\":\n              {\n                if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\") * 1;\n                if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\") * 1; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"SVG\":\n              {\n                ret = {\n                  svg: element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\n                  nodeName: 'SVG',\n                  style: ['html-svg']\n                };\n                break;\n              }\n\n            case \"BR\":\n              {\n                // for BR we return '\\n'\n                ret.text = [{\n                  text: '\\n'\n                }];\n                break;\n              }\n\n            case \"SUB\":\n            case \"SUP\":\n              {\n                ret[nodeName.toLowerCase()] = {\n                  offset: '30%',\n                  fontSize: 8\n                };\n                break;\n              }\n\n            case \"HR\":\n              {\n                // default style for the HR\n                var styleHR = {\n                  width: 514,\n                  type: \"line\",\n                  margin: [0, 12, 0, 12],\n                  thickness: 0.5,\n                  color: \"#000000\",\n                  left: 0\n                }; // we can override the default HR style with \"data-pdfmake\"\n\n                if (element.dataset && element.dataset.pdfmake) {\n                  dataset = JSON.parse(element.dataset.pdfmake);\n\n                  for (key in dataset) {\n                    styleHR[key] = dataset[key];\n                  }\n                }\n\n                ret.margin = styleHR.margin;\n                ret.canvas = [{\n                  type: styleHR.type,\n                  x1: styleHR.left,\n                  y1: 0,\n                  x2: styleHR.width,\n                  y2: 0,\n                  lineWidth: styleHR.thickness,\n                  lineColor: styleHR.color\n                }];\n                delete ret.text;\n                break;\n              }\n\n            case \"OL\":\n            case \"UL\":\n              {\n                ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                }); // check if we have `start`\n\n                if (element.getAttribute(\"start\")) {\n                  ret.start = element.getAttribute(\"start\") * 1;\n                } // check if we have \"type\"\n\n\n                switch (element.getAttribute(\"type\")) {\n                  case 'A':\n                    ret.type = 'upper-alpha';\n                    break;\n\n                  case 'a':\n                    ret.type = 'lower-alpha';\n                    break;\n\n                  case 'I':\n                    ret.type = 'upper-roman';\n                    break;\n\n                  case 'i':\n                    ret.type = 'lower-roman';\n                    break;\n                } // check if we have `list-style-type` or `list-style`\n\n\n                if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\n                break;\n              }\n\n            case \"LI\":\n              {\n                // if it's a stack, then check if the last child has a \"text\"\n                if (ret.stack && !ret.stack[ret.stack.length - 1].text) {\n                  // if not, we restructure our node\n                  text = ret.stack.slice(0, -1);\n                  ret = [{\n                    \"text\": text\n                  }, ret.stack[ret.stack.length - 1]];\n                }\n\n                break;\n              }\n\n            case \"IMG\":\n              {\n                if (this.imagesByReference) {\n                  var src = element.getAttribute(\"src\");\n                  var index = this.imagesRef.indexOf(src);\n                  if (index > -1) ret.image = 'img_ref_' + index;else {\n                    ret.image = 'img_ref_' + this.imagesRef.length;\n                    this.imagesRef.push(src);\n                  }\n                } else {\n                  ret.image = element.getAttribute(\"src\");\n                }\n\n                delete ret.stack;\n                delete ret.text; // apply all the inhirent classes and styles from the parents, or for the current element\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            case \"A\":\n              {\n                // the link must be applied to the deeper `text`\n                var setLink = function setLink(pointer, href) {\n                  pointer = pointer || {\n                    text: ''\n                  }; // for link without any text\n\n                  if (Array.isArray(pointer.text)) {\n                    return setLink(pointer.text[0], href);\n                  } // if 'href' starts with '#' then it's an internal link\n\n\n                  if (href.indexOf('#') === 0) pointer.linkToDestination = href.slice(1);else pointer.link = href;\n                  pointer.nodeName = \"A\";\n                  return pointer;\n                };\n\n                if (element.getAttribute(\"href\")) {\n                  ret = setLink(ret, element.getAttribute(\"href\"));\n                }\n\n                break;\n              }\n\n            case \"FONT\":\n              {\n                if (element.getAttribute(\"color\")) {\n                  ret.color = this.parseColor(element.getAttribute(\"color\"));\n                } // Checking if the element has a size attribute\n\n\n                if (element.getAttribute(\"size\")) {\n                  // Getting and sanitizing the size value: it should be included between 1 and 7\n                  var size = Math.min(Math.max(1, parseInt(element.getAttribute(\"size\"))), 7); // Getting the relative fontsize\n\n                  var fontSize = Math.max(this.fontSizes[0], this.fontSizes[size - 1]); // Assigning the font size\n\n                  ret.fontSize = fontSize;\n                } // Applying inherited styles\n\n\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n\n            default:\n              {\n                // handle other cases\n                if (options && typeof options.customTag === \"function\") {\n                  ret = options.customTag.call(this, {\n                    element: element,\n                    parents: parents,\n                    ret: ret\n                  });\n                }\n              }\n          } // reduce the number of JSON properties\n\n\n          if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\n            ret.text = ret.text[0].text;\n          } // check if we have some data-pdfmake to apply\n\n\n          if (['HR', 'TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\n            dataset = JSON.parse(element.dataset.pdfmake);\n\n            for (key in dataset) {\n              ret[key] = dataset[key];\n            }\n          }\n\n          return ret;\n        }\n    }\n  };\n\n  this.searchForStack = function (ret) {\n    if (Array.isArray(ret.text)) {\n      for (var i = 0; i < ret.text.length; i++) {\n        if (ret.text[i].stack || ['P', 'DIV', 'TABLE', 'SVG', 'UL', 'OL', 'IMG', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(ret.text[i].nodeName) > -1) return true;\n        if (this.searchForStack(ret.text[i]) === true) return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Add empty cells due to rowspan\r\n   *\r\n   * @param {Object} params\r\n   *   @param {Array} rows\r\n   *   @param {Object} cell\r\n   *   @param {Number} rowIndex Current row index\r\n   *   @param {Number} cellIndex Current cell index\r\n   */\n\n\n  this.setRowSpan = function (params) {\n    var cells;\n\n    if (params.cell.rowSpan) {\n      for (var i = 1; i <= params.cell.rowSpan - 1; i++) {\n        cells = params.rows[params.rowIndex + i].text || params.rows[params.rowIndex + i].stack;\n        cells.splice(params.cellIndex, 0, {\n          text: ''\n        });\n      }\n    }\n  };\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\n\n\n  this.applyStyle = function (params) {\n    var cssClass = [];\n    var lastIndex = params.parents.length - 1;\n\n    var _this = this;\n\n    params.parents.forEach(function (parent, parentIndex) {\n      // classes\n      var parentNodeName = parent.nodeName.toLowerCase();\n      var htmlClass = 'html-' + parentNodeName;\n      if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\n      var parentClass = (parent.getAttribute(\"class\") || \"\").split(' ');\n      parentClass.forEach(function (p) {\n        if (p) cssClass.push(p);\n      }); // styles\n\n      var style; // not all the CSS properties should be inherent\n\n      var ignoreNonDescendentProperties = parentIndex !== lastIndex; // 1) the default styles\n\n      if (_this.defaultStyles[parentNodeName]) {\n        for (style in _this.defaultStyles[parentNodeName]) {\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\n            if (!ignoreNonDescendentProperties || ignoreNonDescendentProperties && style.indexOf('margin') === -1 && style.indexOf('border') === -1) {\n              // 'decoration' can be an array\n              if (style === 'decoration') {\n                if (!Array.isArray(params.ret[style])) params.ret[style] = []; // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\n\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\n                }\n              } else {\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\n              }\n            }\n          }\n        }\n      } // 2) element's style\n      // we want TD/TH to receive descendant properties from TR\n\n\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties = false;\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\n      style.forEach(function (stl) {\n        // 'decoration' can be an array\n        if (stl.key === \"decoration\") {\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key] = [];\n          params.ret[stl.key].push(stl.value);\n        } else {\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\n          // then we should change the correct index in `params.ret.margin` to reflect it\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\n            // order: left | top | right | bottom\n            switch (stl.key) {\n              case \"marginLeft\":\n                params.ret.margin[0] = stl.value;\n                break;\n\n              case \"marginTop\":\n                params.ret.margin[1] = stl.value;\n                break;\n\n              case \"marginRight\":\n                params.ret.margin[2] = stl.value;\n                break;\n\n              case \"marginBottom\":\n                params.ret.margin[3] = stl.value;\n                break;\n            }\n          } else {\n            params.ret[stl.key] = stl.value;\n          }\n        }\n      });\n    });\n    params.ret.style = cssClass;\n    return params.ret;\n  };\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\n\n\n  this.parseStyle = function (element, ignoreProperties) {\n    var style = element.getAttribute(\"style\") || \"\";\n    style = style.split(';'); // check if we have \"width\" or \"height\"\n\n    if (element.getAttribute(\"width\")) {\n      style.unshift(\"width:\" + element.getAttribute(\"width\") + \"px\");\n    }\n\n    if (element.getAttribute(\"height\")) {\n      style.unshift(\"height:\" + element.getAttribute(\"height\") + \"px\");\n    }\n\n    var styleDefs = style.map(function (style) {\n      return style.toLowerCase().split(':');\n    });\n    var ret = [];\n    var borders = []; // special treatment for borders\n\n    var nodeName = element.nodeName.toUpperCase();\n\n    var _this = this;\n\n    styleDefs.forEach(function (styleDef) {\n      if (styleDef.length === 2) {\n        var key = styleDef[0].trim();\n        var value = styleDef[1].trim();\n\n        switch (key) {\n          case \"margin\":\n            {\n              if (ignoreProperties) break; // pdfMake uses a different order than CSS\n\n              value = value.split(' ');\n              if (value.length === 1) value = [value[0], value[0], value[0], value[0]];else if (value.length === 2) value = [value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\n              else if (value.length === 3) value = [value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\n              else if (value.length === 4) value = [value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\n              // we now need to convert to PT\n\n              value.forEach(function (val, i) {\n                value[i] = _this.convertToUnit(val);\n              }); // ignore if we have a FALSE in the table\n\n              if (value.indexOf(false) === -1) ret.push({\n                key: key,\n                value: value\n              });\n              break;\n            }\n\n          case \"text-align\":\n            {\n              ret.push({\n                key: \"alignment\",\n                value: value\n              });\n              break;\n            }\n\n          case \"font-weight\":\n            {\n              if (value === \"bold\") ret.push({\n                key: \"bold\",\n                value: true\n              });\n              break;\n            }\n\n          case \"text-decoration\":\n            {\n              ret.push({\n                key: \"decoration\",\n                value: _this.toCamelCase(value)\n              });\n              break;\n            }\n\n          case \"font-style\":\n            {\n              if (value === \"italic\") ret.push({\n                key: \"italics\",\n                value: true\n              });\n              break;\n            }\n\n          case \"font-family\":\n            {\n              ret.push({\n                key: \"font\",\n                value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\n                  return g[0].toUpperCase();\n                }).replace(/ ([a-z])/g, function (g) {\n                  return g[1].toUpperCase();\n                })\n              });\n              break;\n            }\n\n          case \"color\":\n            {\n              ret.push({\n                key: \"color\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n\n          case \"background-color\":\n            {\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\n              ret.push({\n                key: nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n\n          case \"text-indent\":\n            {\n              ret.push({\n                key: \"leadingIndent\",\n                value: _this.convertToUnit(value)\n              });\n              break;\n            }\n\n          case \"white-space\":\n            {\n              ret.push({\n                key: \"preserveLeadingSpaces\",\n                value: value === 'break-spaces' || value.slice(0, 3) === 'pre'\n              });\n              break;\n            }\n\n          default:\n            {\n              // for borders\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\n                if (!ignoreProperties) borders.push({\n                  key: key,\n                  value: value\n                });\n              } else {\n                // ignore some properties\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break; // padding is not supported by PDFMake\n\n                if (key.indexOf(\"padding\") === 0) break;\n                if (key.indexOf(\"-\") > -1) key = _this.toCamelCase(key);\n\n                if (value) {\n                  // convert value to a 'pt' when possible\n                  var parsedValue = _this.convertToUnit(value);\n\n                  ret.push({\n                    key: key,\n                    value: parsedValue === false ? value : parsedValue\n                  });\n                }\n              }\n            }\n        }\n      }\n    }); // for borders\n\n    if (borders.length > 0) {\n      // we have to merge together the borders in two properties\n      var border = []; // array of boolean\n\n      var borderColor = []; // array of colors\n\n      borders.forEach(function (b) {\n        // we have 3 properties: width style color\n        var properties = b.value.split(' ');\n        var width = properties[0].replace(/(\\d+)(\\.\\d+)?([^\\d]+)/g, \"$1$2 \").trim();\n        var index = -1,\n            i;\n        if (b.key.indexOf('-left') > -1) index = 0;else if (b.key.indexOf('-top') > -1) index = 1;else if (b.key.indexOf('-right') > -1) index = 2;else if (b.key.indexOf('-bottom') > -1) index = 3; // for the width\n\n        if (index > -1) {\n          border[index] = width > 0;\n        } else {\n          for (i = 0; i < 4; i++) {\n            border[i] = width > 0;\n          }\n        } // for the color\n\n\n        if (properties.length > 2) {\n          var color = properties.slice(2).join(' ');\n\n          if (index > -1) {\n            borderColor[index] = _this.parseColor(color);\n          } else {\n            for (i = 0; i < 4; i++) {\n              borderColor[i] = _this.parseColor(color);\n            }\n          }\n        }\n      }); // fill the gaps\n\n      for (var i = 0; i < 4; i++) {\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i] = true;\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i] = '#000000';\n      }\n\n      if (border.length > 0) ret.push({\n        key: 'border',\n        value: border\n      });\n      if (borderColor.length > 0) ret.push({\n        key: 'borderColor',\n        value: borderColor\n      });\n    }\n\n    return ret;\n  };\n\n  this.toCamelCase = function (str) {\n    return str.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n  };\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\n\n\n  this.parseColor = function (color) {\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$'); // e.g. `#fff` or `#ff0048`\n\n    var rgbRegex = new RegExp('^rgb\\\\((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)\\\\)$'); // e.g. rgb(0,255,34) or rgb(22, 0, 0)\n\n    var nameRegex = new RegExp('^[a-z]+$');\n\n    if (haxRegex.test(color)) {\n      return color;\n    } else if (rgbRegex.test(color)) {\n      var decimalColors = rgbRegex.exec(color).slice(1);\n\n      for (var i = 0; i < 3; i++) {\n        var decimalValue = +decimalColors[i];\n\n        if (decimalValue > 255) {\n          decimalValue = 255;\n        }\n\n        var hexString = '0' + decimalValue.toString(16);\n        hexString = hexString.slice(-2);\n        decimalColors[i] = hexString;\n      }\n\n      return '#' + decimalColors.join('');\n    } else if (nameRegex.test(color)) {\n      return color === \"transparent\" ? \"white\" : color;\n    } else {\n      console.error('Could not parse color \"' + color + '\"');\n      return color;\n    }\n  };\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\n\n\n  this.convertToUnit = function (val) {\n    // if it's just a number, then return it\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val * 1;\n    var mtch = (val + \"\").trim().match(/^(\\d+(\\.\\d+)?)(pt|px|r?em|cm)$/); // if we don't have a number with supported units, then return false\n\n    if (!mtch) return false;\n    val = mtch[1];\n\n    switch (mtch[3]) {\n      case 'px':\n        {\n          val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\n\n          break;\n        }\n\n      case 'em':\n      case 'rem':\n        {\n          val *= 12; // default font-size is 12pt\n\n          break;\n        }\n\n      case 'cm':\n        {\n          val = Math.round(val * 28.34646); // 1cm => 28.34646\n\n          break;\n        }\n    }\n\n    return val * 1;\n  };\n\n  var result = this.convertHtml(htmlText); // if we only pass a string without HTML code\n\n  if (typeof result === \"string\") result = {\n    text: result\n  }; // if images by reference\n\n  if (this.imagesByReference) {\n    result = {\n      content: result,\n      images: {}\n    };\n    this.imagesRef.forEach(function (src, i) {\n      result.images['img_ref_' + i] = src;\n    });\n  }\n\n  return result;\n}\n\nmodule.exports = function (htmlText, options) {\n  return new htmlToPdfMake(htmlText, options);\n};"],"names":["htmlToPdfMake","htmlText","options","this","wndw","window","tableAutoSize","imagesByReference","fontSizes","Array","isArray","defaultStyles","b","bold","strong","u","decoration","del","s","em","italics","i","h1","fontSize","marginBottom","h2","h3","h4","h5","h6","a","color","strike","p","margin","ul","marginLeft","table","th","fillColor","imagesRef","changeDefaultStyles","keyStyle","hasOwnProperty","k","ks","convertHtml","parsedHtml","DOMParser","parseFromString","docDef","parseElement","body","stack","text","element","parents","dataset","key","nodeName","toUpperCase","nodeNameLowerCase","toLowerCase","ret","_this","indexOf","nodeType","textContent","styleParentTextNode","parseStyle","length","hasWhiteSpace","value","replace","replaceText","applyStyle","id","push","childNodes","forEach","call","child","res","searchForStack","slice","pop","rowIndex","cellIndex","tbodies","allRows","tbody","rows","concat","row","cells","cell","colSpan","setRowSpan","cellsWidths","cellsHeights","tableWidths","tableHeights","width","height","isNaN","rowSpan","cellWidth","type","cellHeight","widths","heights","pdfmake","charAt","JSON","parse","layout","e","console","error","getAttribute","svg","outerHTML","style","offset","styleHR","thickness","left","canvas","x1","y1","x2","y2","lineWidth","lineColor","start","listStyle","listStyleType","src","index","image","setLink","pointer","href","linkToDestination","link","parseColor","size","Math","min","max","parseInt","customTag","params","splice","cssClass","lastIndex","parent","parentIndex","parentNodeName","htmlClass","unshift","split","ignoreNonDescendentProperties","stringify","stl","ignoreProperties","styleDefs","map","borders","styleDef","trim","val","convertToUnit","toCamelCase","g","parsedValue","border","borderColor","properties","join","str","haxRegex","RegExp","rgbRegex","nameRegex","test","decimalColors","exec","decimalValue","hexString","toString","parseFloat","isFinite","mtch","match","round","result","content","images","module","exports"],"sourceRoot":""}