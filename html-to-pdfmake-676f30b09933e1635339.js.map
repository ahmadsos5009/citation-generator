{"version":3,"file":"html-to-pdfmake-676f30b09933e1635339.js","mappings":"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","sources":["webpack://citation-generator/./node_modules/html-to-pdfmake/index.js"],"sourcesContent":["// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\r\n// and https://github.com/bpampuch/pdfmake/issues/205\r\n\r\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\r\n\r\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF – use this option to remove them\r\n *   @param  {Boolean} [showHidden=false] TRUE if the 'display:none' elements should be displayed\r\n *   @param  {Boolean} [removeTagClasses=false] TRUE if we don't want to have 'html-TAG' added as a class for each node\r\n *   @param  {Array} [ignoreStyles=[]] An array of style property to ignore\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\r\n//var util = require(\"util\"); // to debug\r\nfunction htmlToPdfMake(htmlText, options) {\r\n  'use strict';\r\n  this.wndw = (options && options.window ? options.window : window);\r\n  this.tableAutoSize = (options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false);\r\n  this.imagesByReference = (options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false);\r\n  this.removeExtraBlanks = (options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false);\r\n  this.showHidden = (options && typeof options.showHidden === \"boolean\" ? options.showHidden : false);\r\n  this.removeTagClasses = (options && typeof options.removeTagClasses === \"boolean\" ? options.removeTagClasses : false);\r\n  this.ignoreStyles = (options && Array.isArray(options.ignoreStyles) ? options.ignoreStyles : []);\r\n\r\n  // A random string to be used in the image references\r\n  var imagesByReferenceSuffix = (Math.random().toString(36).slice(2,8));\r\n\r\n  // Used with the size attribute on the font elements to calculate relative font size\r\n  this.fontSizes = (options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]);\r\n\r\n  // set default styles\r\n  this.defaultStyles = {\r\n    b: {bold:true},\r\n    strong: {bold:true},\r\n    u: {decoration:'underline'},\r\n    del: {decoration:'lineThrough'},\r\n    s: {decoration: 'lineThrough'},\r\n    em: {italics:true},\r\n    i: {italics:true},\r\n    h1: {fontSize:24, bold:true, marginBottom:5},\r\n    h2: {fontSize:22, bold:true, marginBottom:5},\r\n    h3: {fontSize:20, bold:true, marginBottom:5},\r\n    h4: {fontSize:18, bold:true, marginBottom:5},\r\n    h5: {fontSize:16, bold:true, marginBottom:5},\r\n    h6: {fontSize:14, bold:true, marginBottom:5},\r\n    a: {color:'blue', decoration:'underline'},\r\n    strike: {decoration: 'lineThrough'},\r\n    p: {margin:[0, 5, 0, 10]},\r\n    ul: {marginBottom:5,marginLeft:5},\r\n    table: {marginBottom:5},\r\n    th: {bold:true, fillColor:'#EEEEEE'}\r\n  }\r\n\r\n  // store the references to the images\r\n  this.imagesRef = [];\r\n\r\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\r\n  this.changeDefaultStyles = function () {\r\n    for (var keyStyle in options.defaultStyles) {\r\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\r\n        // if we want to remove a default style\r\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\r\n          delete this.defaultStyles[keyStyle];\r\n        } else {\r\n          for (var k in options.defaultStyles[keyStyle]) {\r\n            // if we want to delete a specific property\r\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];\r\n            else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\r\n          }\r\n        }\r\n      } else {\r\n        // if we add default styles\r\n        this.defaultStyles[keyStyle] = {}\r\n        for (var ks in options.defaultStyles[keyStyle]) {\r\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (options && options.defaultStyles) {\r\n    this.changeDefaultStyles();\r\n  }\r\n\r\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\r\n  this.convertHtml = function(htmlText) {\r\n    // Create a HTML DOM tree out of html string\r\n    var parser = new this.wndw.DOMParser();\r\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ul|li))/gi, \"$1$4\");\r\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\r\n\r\n    var docDef = this.parseElement(parsedHtml.body, []);\r\n\r\n    // remove first level\r\n    return docDef.stack || docDef.text;\r\n  }\r\n\r\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\r\n  this.parseElement = function(element, parents) {\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var nodeNameLowerCase = nodeName.toLowerCase();\r\n    var ret = {text:[]};\r\n    var text, needStack=false;\r\n    var dataset, i, key, _this=this;\r\n\r\n    // ignore some HTML tags\r\n    if (['COLGROUP','COL'].indexOf(nodeName) > -1) return '';\r\n\r\n    switch(element.nodeType) {\r\n      case 3: { // TEXT_NODE\r\n        if (element.textContent) {\r\n          text = element.textContent;\r\n          // check if we have 'white-space' in the parent's style\r\n          // or if a parent is a <PRE>\r\n          var styleParentTextNode = this.parseStyle(parents[parents.length-1], true);\r\n          var hasWhiteSpace = (parents.findIndex(function(p) { return p.nodeName === \"PRE\" })>-1);\r\n          for (i=0; i<styleParentTextNode.length; i++) {\r\n            if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\r\n              hasWhiteSpace=styleParentTextNode[i].value;\r\n              break;\r\n            }\r\n          }\r\n          // if no 'white-space' style, then deal with white spaces\r\n          if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\r\n          if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\r\n\r\n          // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\r\n          if (['TABLE','THEAD','TBODY','TFOOT','TR','UL','OL'].indexOf(parents[parents.length-1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n          if (text) {\r\n            ret = {'text':text};\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        return '';\r\n      }\r\n      case 1: { // ELEMENT_NODE\r\n        if (!this.showHidden && (element.style.display && element.style.display === 'none') || (element.style.visibility && element.style.visibility === 'hidden')) {\r\n          return;\r\n        }\r\n\r\n        ret.nodeName = nodeName;\r\n        if (element.id) ret.id = element.id;\r\n        parents.push(element);\r\n\r\n        if (element.childNodes && element.childNodes.length>0) {\r\n          [].forEach.call(element.childNodes, function(child) {\r\n            var res = _this.parseElement(child, parents);\r\n            if (res) {\r\n              if (Array.isArray(res.text) && res.text.length===0) res.text='';\r\n              ret.text.push(res);\r\n            }\r\n          });\r\n          //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\r\n          // find if we need a 'stack' instead of a 'text'\r\n          needStack = this.searchForStack(ret);\r\n          if (needStack) {\r\n            ret.stack = ret.text.slice(0);\r\n            delete ret.text;\r\n          } else {\r\n            // apply all the inhirent classes and styles from the parents\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n          }\r\n        }\r\n        parents.pop();\r\n\r\n        switch(nodeName) {\r\n          case \"TABLE\":{\r\n            var rowIndex;\r\n            // the format for the table is table.body[[], [], …]\r\n            ret.table = {body:[]};\r\n\r\n            var tbodies = (ret.stack || ret.text);\r\n            if (Array.isArray(tbodies)) {\r\n              rowIndex = 0;\r\n              // Array with All Rows including THEAD\r\n              var hasRowSpan = false; // TRUE if we have some rowspan\r\n              // first round is to deal with colspan\r\n              // for each THEAD / TBODY\r\n              tbodies.forEach(function(tbody) {\r\n                // for each row\r\n                var rows = (tbody.stack || tbody.text);\r\n                if (Array.isArray(rows)) {\r\n                  rows.forEach(function(row) {\r\n                    var cells = (row.stack || row.text);\r\n                    // for each cell\r\n                    if (Array.isArray(cells)) {\r\n                      ret.table.body[rowIndex] = [];\r\n                      cells.forEach(function(cell) {\r\n                        ret.table.body[rowIndex].push(cell);\r\n                        // do we have a colSpan?\r\n                        // if yes, insert empty cells due to colspan\r\n                        if (cell.colSpan>1) {\r\n                          i = cell.colSpan;\r\n                          // insert an empty cell for each colspan\r\n                          while (--i > 0) {\r\n                            ret.table.body[rowIndex].push({text:''});\r\n                          }\r\n                        }\r\n\r\n                        // do we have a rowSpan ?\r\n                        if (cell.rowSpan > 1) hasRowSpan=true;\r\n                      });\r\n                      rowIndex++;\r\n                    }\r\n                 });\r\n                }\r\n              });\r\n\r\n              if (hasRowSpan) {\r\n                // we go through all again, just to deal with rowspan\r\n                ret.table.body.forEach(function(row, rowIndex) {\r\n                  // for each row\r\n                  row.forEach(function(cell, cellIndex) {\r\n                    // do we have a rowSpan?\r\n                    if (cell.rowSpan>1) {\r\n                      var len = cell.rowSpan;\r\n                      var cs, colspan = (cell.colSpan ? cell.colSpan : 1);\r\n                      for (var i=1; i <= len-1; i++) {\r\n                        cs = colspan;\r\n                        if (ret.table.body[rowIndex+i]) {\r\n                          while (cs--) ret.table.body[rowIndex+i].splice(cellIndex, 0, {text:''});\r\n                        } else {\r\n                          // if we have an empty <tr></tr>\r\n                          cell.rowSpan--;\r\n                        }\r\n                      }\r\n                    }\r\n                  })\r\n                });\r\n              }\r\n            }\r\n\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n\r\n            // if option tableAutoSize, then we try to apply the correct width/height on the table\r\n            if (this.tableAutoSize) {\r\n              var cellsWidths = [];\r\n              var cellsHeights = [];\r\n              var tableWidths = [];\r\n              var tableHeights = [];\r\n              // determine if we have \"width:100%\" on the TABLE\r\n              var fullWidth = (element.getAttribute(\"width\") === \"100%\" || (element.getAttribute(\"style\")||\"\").replace(/width\\s*:\\s*100%/, \"width:100%\").includes(\"width:100%\"));\r\n\r\n              ret.table.body.forEach(function(row, rowIndex) {\r\n                cellsWidths.push([]);\r\n                cellsHeights.push([]);\r\n                row.forEach(function(cell) {\r\n                  // we want to remember the different sizes\r\n                  var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\r\n                  var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\r\n                  // check if we have colspan or rowspan\r\n                  // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\r\n                  if (width !== 'auto' && cell.colSpan>1) {\r\n                    if (!isNaN(width)) width /= cell.colSpan;\r\n                    else width = 'auto';\r\n                  }\r\n                  if (height !== 'auto' && cell.rowSpan>1) {\r\n                    if (!isNaN(height)) height /= cell.rowSpan;\r\n                    else height = 'auto';\r\n                  }\r\n                  cellsWidths[rowIndex].push(width);\r\n                  cellsHeights[rowIndex].push(height);\r\n                });\r\n              });\r\n\r\n              // determine the max width for each cell\r\n              cellsWidths.forEach(function(row) {\r\n                row.forEach(function(cellWidth, cellIndex) {\r\n                  var type = typeof tableWidths[cellIndex];\r\n                  if (type === \"undefined\" || (cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex]) || (cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto')) {\r\n                    tableWidths[cellIndex] = cellWidth;\r\n                  }\r\n                });\r\n              });\r\n              // determine the max height for each row\r\n              cellsHeights.forEach(function(row, rowIndex) {\r\n                row.forEach(function(cellHeight) {\r\n                  var type = typeof tableHeights[rowIndex];\r\n                  if (type === \"undefined\" || (cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex]) || (cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto')) {\r\n                    tableHeights[rowIndex] = cellHeight;\r\n                  }\r\n                });\r\n              });\r\n              if (tableWidths.length > 0) {\r\n                // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\r\n                // then put widths:['*', '*' …], for all columns\r\n                //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\r\n                // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\r\n                // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\r\n                if (fullWidth) tableWidths=tableWidths.map(function(w) { return w==='auto' ? '*' : w });\r\n                ret.table.widths = tableWidths;\r\n              }\r\n              if (tableHeights.length > 0) ret.table.heights = tableHeights;\r\n            }\r\n\r\n            // check if we have some data-pdfmake to apply\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\r\n              dataset = element.dataset.pdfmake;\r\n              if (dataset.charAt(1) === \"'\") dataset=dataset.replace(/'/g,'\"');\r\n              try {\r\n                dataset = JSON.parse(dataset);\r\n                for (key in dataset) {\r\n                  if (key === \"layout\") {\r\n                    ret.layout = dataset[key];\r\n                  } else {\r\n                    ret.table[key] = dataset[key];\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case \"TH\":\r\n          case \"TD\":{\r\n            if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\")*1;\r\n            if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\")*1;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"SVG\": {\r\n            ret = {\r\n              svg:element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\r\n              nodeName:'SVG'\r\n            }\r\n            if (!this.removeTagClasses) ret.style=['html-svg'];\r\n            break;\r\n          }\r\n          case \"BR\": {\r\n            // for BR we return '\\n'\r\n            ret.text = [{text:'\\n'}];\r\n            break;\r\n          }\r\n          case \"SUB\":\r\n          case \"SUP\": {\r\n            ret[nodeName.toLowerCase()] = { offset: '30%', fontSize: 8 };\r\n            break;\r\n          }\r\n          case \"HR\": {\r\n            // default style for the HR\r\n            var styleHR = {\r\n              width: 514,\r\n              type: \"line\",\r\n              margin: [0, 12, 0, 12],\r\n              thickness: 0.5,\r\n              color: \"#000000\",\r\n              left: 0\r\n            };\r\n            // we can override the default HR style with \"data-pdfmake\"\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              dataset = JSON.parse(element.dataset.pdfmake);\r\n              for (key in dataset) {\r\n                styleHR[key] = dataset[key];\r\n              }\r\n            }\r\n\r\n            ret.margin = styleHR.margin;\r\n            ret.canvas = [\r\n              {\r\n                type: styleHR.type,\r\n                x1: styleHR.left,\r\n                y1: 0,\r\n                x2: styleHR.width,\r\n                y2: 0,\r\n                lineWidth: styleHR.thickness,\r\n                lineColor: styleHR.color\r\n              }\r\n            ];\r\n            delete ret.text;\r\n\r\n            break;\r\n          }\r\n          case \"OL\":\r\n          case \"UL\": {\r\n            ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            // check if we have `start`\r\n            if (element.getAttribute(\"start\")) {\r\n              ret.start = element.getAttribute(\"start\")*1;\r\n            }\r\n            // check if we have \"type\"\r\n            switch (element.getAttribute(\"type\")) {\r\n              case 'A': ret.type = 'upper-alpha'; break;\r\n              case 'a': ret.type = 'lower-alpha'; break;\r\n              case 'I': ret.type = 'upper-roman'; break;\r\n              case 'i': ret.type = 'lower-roman'; break;\r\n            }\r\n\r\n            // check if we have `list-style-type` or `list-style`\r\n            if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\r\n            break;\r\n          }\r\n          case \"LI\": {\r\n            // if it's a stack, then check if the last child has a \"text\"\r\n            if (ret.stack && !ret.stack[ret.stack.length-1].text) {\r\n              // if not, we restructure our node\r\n              text = ret.stack.slice(0, -1);\r\n              ret = [\r\n                (Array.isArray(text) ? {\"stack\": text} : {\"text\": text}),\r\n                ret.stack[ret.stack.length-1]\r\n              ];\r\n            }\r\n            // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\r\n            if (Array.isArray(ret)) {\r\n              ret = {stack:ret};\r\n            }\r\n            break;\r\n          }\r\n          case \"PRE\":{\r\n            ret.preserveLeadingSpaces = true;\r\n            break;\r\n          }\r\n          case \"IMG\": {\r\n            if (this.imagesByReference) {\r\n              var src = element.getAttribute(\"data-src\") || element.getAttribute(\"src\");\r\n              var index = this.imagesRef.indexOf(src);\r\n              if (index>-1) ret.image = 'img_ref_'+imagesByReferenceSuffix+index;\r\n              else {\r\n                ret.image = 'img_ref_'+imagesByReferenceSuffix+this.imagesRef.length;\r\n                this.imagesRef.push(src);\r\n              }\r\n            } else {\r\n              ret.image = element.getAttribute(\"src\");\r\n            }\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"A\": {\r\n            // the link must be applied to the deeper `text` or stacked element (e.g. `image`)\r\n            var setLink = function(pointer, href) {\r\n              pointer = pointer || {text:''}; // for link without any text\r\n              if (Array.isArray(pointer.text)) {\r\n                return setLink(pointer.text[0], href);\r\n              } else if (Array.isArray(pointer.stack)) {\r\n                // if we have a more complex layer\r\n                pointer.stack = pointer.stack.map(function(stack) {\r\n                  return setLink(stack, href);\r\n                });\r\n                return pointer;\r\n              }\r\n              // if 'href' starts with '#' then it's an internal link\r\n              if (href.indexOf('#') === 0) pointer.linkToDestination=href.slice(1);\r\n              else pointer.link = href;\r\n              return pointer;\r\n            }\r\n            if (element.getAttribute(\"href\")) {\r\n              ret = setLink(ret, element.getAttribute(\"href\"));\r\n              ret.nodeName = \"A\";\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            // handle other cases\r\n            if (options && typeof options.customTag === \"function\") {\r\n              ret = options.customTag.call(this, {element:element, parents:parents, ret:ret});\r\n            }\r\n          }\r\n        }\r\n\r\n        // reduce the number of JSON properties\r\n        if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\r\n          ret.text = ret.text[0].text;\r\n        }\r\n\r\n        // check if we have some data-pdfmake to apply\r\n        if (['HR','TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\r\n          dataset = JSON.parse(element.dataset.pdfmake);\r\n          for (key in dataset) {\r\n            ret[key] = dataset[key];\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  this.searchForStack = function(ret) {\r\n    if (Array.isArray(ret.text)) {\r\n      for (var i=0; i<ret.text.length; i++) {\r\n        if (ret.text[i].stack || ['P','DIV','TABLE','SVG','UL','OL','IMG','H1','H2','H3','H4','H5','H6'].indexOf(ret.text[i].nodeName) > -1) return true;\r\n        if (this.searchForStack(ret.text[i]) === true) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\r\n  this.applyStyle = function(params) {\r\n    var cssClass = [];\r\n    var lastIndex = params.parents.length-1;\r\n    var _this = this;\r\n    params.parents.forEach(function(parent, parentIndex) {\r\n      // classes\r\n      var parentNodeName = parent.nodeName.toLowerCase();\r\n      if (!_this.removeTagClasses) {\r\n        var htmlClass = 'html-' + parentNodeName;\r\n        if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\r\n      }\r\n      var parentClass = (parent.getAttribute(\"class\")||\"\").split(' ');\r\n      parentClass.forEach(function(p) {\r\n        if (p) cssClass.push(p);\r\n      });\r\n      // styles\r\n      var style;\r\n      // not all the CSS properties should be inherent\r\n      var ignoreNonDescendentProperties = (parentIndex!==lastIndex);\r\n      // 1) the default styles\r\n      if (_this.defaultStyles[parentNodeName]) {\r\n        for (style in _this.defaultStyles[parentNodeName]) {\r\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\r\n            if (!ignoreNonDescendentProperties ||\r\n                (ignoreNonDescendentProperties &&\r\n                  style.indexOf('margin') === -1 &&\r\n                  style.indexOf('border') === -1\r\n                )\r\n               ) {\r\n              // 'decoration' can be an array\r\n              if (style === 'decoration') {\r\n                if (!Array.isArray(params.ret[style])) params.ret[style]=[];\r\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\r\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\r\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\r\n                }\r\n              } else {\r\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 2) element's style\r\n      // we want TD/TH to receive descendant properties from TR\r\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties=false;\r\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\r\n      style.forEach(function(stl) {\r\n        // 'decoration' can be an array\r\n        if (stl.key === \"decoration\") {\r\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key]=[];\r\n          params.ret[stl.key].push(stl.value);\r\n        } else {\r\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\r\n          // then we should change the correct index in `params.ret.margin` to reflect it\r\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\r\n            // order: left | top | right | bottom\r\n            switch(stl.key) {\r\n              case \"marginLeft\": params.ret.margin[0]=stl.value; break;\r\n              case \"marginTop\": params.ret.margin[1]=stl.value; break;\r\n              case \"marginRight\": params.ret.margin[2]=stl.value; break;\r\n              case \"marginBottom\": params.ret.margin[3]=stl.value; break;\r\n            }\r\n          } else {\r\n            params.ret[stl.key] = stl.value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (cssClass.length>0) params.ret.style = cssClass;\r\n    return params.ret;\r\n  }\r\n\r\n\t/**\r\n\t * Border Value Rearrange a CSS expression (e.g. 'border:solid 10px red' to 'border:10px solid red')\r\n\t *\r\n\t * @param {String} styleStr The CSS expression values\r\n\t * @returns {String} border value in global accepted format (e.g. 'border:10px solid red')\r\n\t */\r\n\tthis.borderValueRearrange = function(styleStr) {\r\n\t\ttry {\r\n\t\t\tvar styleArray = styleStr.split(' ');\r\n      if (styleArray.length!==3) return styleStr;\r\n\t\t\tvar v1 = \"0px\", v2 = \"none\", v3 = \"transparent\";\r\n\t\t\tvar style = [\"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\", \"mix\"];\r\n\t\t\tstyleArray.forEach(function (v) {\r\n\t\t\t\tif (v.match(/^\\d/)) {\r\n\t\t\t\t\tv1 = v;\r\n\t\t\t\t} else if (style.indexOf(v) > -1) {\r\n\t\t\t\t\tv2 = v;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tv3 = v;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn v1 + ' ' + v2 + ' ' + v3;\r\n\t\t} catch (e) {\r\n\t\t\treturn styleStr;\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\r\n  this.parseStyle = function(element, ignoreProperties) {\r\n    var style = element.getAttribute(\"style\") || \"\";\r\n    var ret = [];\r\n    style = style.split(';');\r\n    // check if we have \"width\" or \"height\"\r\n    var width = element.getAttribute(\"width\");\r\n    var height = element.getAttribute(\"height\");\r\n    if (width) {\r\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\r\n    }\r\n    if (height) {\r\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\r\n    }\r\n    // check if we have 'color' or 'size' -- mainly for '<font>'\r\n    var color = element.getAttribute(\"color\");\r\n    if (color) {\r\n      ret.push({key:\"color\", value:this.parseColor(color)});\r\n    }\r\n    var size = element.getAttribute(\"size\");\r\n    if (size !== null) {\r\n      // Getting and sanitizing the size value: it should be included between 1 and 7\r\n      size = Math.min(Math.max(1, parseInt(size)), 7);\r\n      // Assigning the font size\r\n      ret.push({key:'fontSize', value:Math.max(this.fontSizes[0], this.fontSizes[size - 1])});\r\n    }\r\n\r\n    var styleDefs = style.map(function(style) { return style.toLowerCase().split(':') });\r\n    var borders = []; // special treatment for borders\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var _this=this;\r\n    styleDefs.forEach(function(styleDef) {\r\n      if (styleDef.length===2) {\r\n        var key = styleDef[0].trim().toLowerCase();\r\n        var value = styleDef[1].trim();\r\n        if (_this.ignoreStyles.indexOf(key) === -1) {\r\n          switch (key) {\r\n            case \"margin\": {\r\n              if (ignoreProperties) break;\r\n              // pdfMake uses a different order than CSS\r\n              value = value.split(' ');\r\n              if (value.length===1) value=[value[0], value[0], value[0], value[0]];\r\n              else if (value.length===2) value=[value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\r\n              else if (value.length===3) value=[value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\r\n              else if (value.length===4) value=[value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\r\n\r\n              // we now need to convert to PT\r\n              value.forEach(function(val, i) {\r\n                value[i] = _this.convertToUnit(val);\r\n              });\r\n              // ignore if we have a FALSE in the table\r\n              if (value.indexOf(false) === -1) ret.push({key:key, value:value});\r\n              break;\r\n            }\r\n            case \"line-height\": {\r\n              // change % unit\r\n              if (typeof value === \"string\" && value.slice(-1) === '%') {\r\n                value = value.slice(0,-1) / 100;\r\n              } else {\r\n                value = _this.convertToUnit(value);\r\n              }\r\n              ret.push({key:\"lineHeight\", value:value});\r\n              break;\r\n            }\r\n            case \"text-align\": {\r\n              ret.push({key:\"alignment\", value:value});\r\n              break;\r\n            }\r\n            case \"font-weight\": {\r\n              if (value === \"bold\") ret.push({key:\"bold\", value:true});\r\n              break;\r\n            }\r\n            case \"text-decoration\": {\r\n              ret.push({key:\"decoration\", value:_this.toCamelCase(value)})\r\n              break;\r\n            }\r\n            case \"font-style\": {\r\n              if (value===\"italic\") ret.push({key:\"italics\", value:true});\r\n              break;\r\n            }\r\n            case \"font-family\": {\r\n\t\t\t\t\t\t\tret.push({\r\n\t\t\t\t\t\t\t\tkey: \"font\", value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\r\n\t\t\t\t\t\t\t\t\treturn g[0].toUpperCase();\r\n\t\t\t\t\t\t\t\t}).replace(/ ([a-z])/g, function (g) {\r\n\t\t\t\t\t\t\t\t\treturn g[1].toUpperCase();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tbreak;\r\n            }\r\n            case \"color\": {\r\n              ret.push({key:\"color\", value:_this.parseColor(value)})\r\n              break;\r\n            }\r\n            case \"background-color\": {\r\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\r\n              ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\"), value:_this.parseColor(value)})\r\n              break;\r\n            }\r\n            case \"text-indent\": {\r\n              ret.push({key:\"leadingIndent\", value:_this.convertToUnit(value)});\r\n              break;\r\n            }\r\n            case \"white-space\": {\r\n              ret.push({key:\"preserveLeadingSpaces\", value:(value==='break-spaces' || value.slice(0,3) === 'pre')});\r\n              break;\r\n            }\r\n            default: {\r\n              // for borders\r\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\r\n                if (!ignoreProperties) borders.push({key:key, value:value});\r\n              } else {\r\n                // ignore some properties\r\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\r\n                // for IMG only (see issue #181)\r\n                if (nodeName === \"IMG\" && (key === 'width' || key === 'height')) {\r\n                  ret.push({key:key, value: _this.convertToUnit(value)});\r\n                  break;\r\n                }\r\n\r\n                // padding is not supported by PDFMake\r\n                if (key.indexOf(\"padding\") === 0) break;\r\n                if (key.indexOf(\"-\") > -1) key=_this.toCamelCase(key);\r\n                if (value) {\r\n                  // convert value to a 'pt' when possible\r\n                  var parsedValue = _this.convertToUnit(value);\r\n                  // if we have 'font-size' with a parsedValue at false, then ignore it\r\n                  if (key === 'font-size' && parsedValue === false) break;\r\n                  ret.push({key:key, value:(parsedValue === false ? value : parsedValue)});\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // for borders\r\n    if (borders.length > 0) {\r\n      // we have to merge together the borders in two properties\r\n      var border = []; // array of boolean\r\n      var borderColor = []; // array of colors\r\n      borders.forEach(function(b) {\r\n        // we have 3 properties: width style color\r\n\t\t\t\tb.value = _this.borderValueRearrange(b.value);\r\n        var properties = b.value.split(' ');\r\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g,\"$1$2 \").trim();\r\n        var index = -1, i;\r\n        if (b.key.indexOf('-left') > -1) index=0;\r\n        else if (b.key.indexOf('-top') > -1) index=1;\r\n        else if (b.key.indexOf('-right') > -1) index=2;\r\n        else if (b.key.indexOf('-bottom') > -1) index=3;\r\n        // for the width\r\n        if (index > -1) {\r\n          border[index] = (width > 0);\r\n        } else {\r\n          for (i=0; i<4; i++) border[i] = (width > 0);\r\n        }\r\n        // for the color\r\n        if (properties.length > 2) {\r\n          var color = properties.slice(2).join(' ');\r\n          if (index > -1) {\r\n            borderColor[index] = _this.parseColor(color);\r\n          } else {\r\n            for (i=0; i<4; i++) borderColor[i] = _this.parseColor(color);\r\n          }\r\n        }\r\n      });\r\n      // fill the gaps\r\n      for (var i=0; i<4; i++) {\r\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i]=true;\r\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i]='#000000';\r\n      }\r\n      if (border.length > 0) ret.push({key:'border', value:border});\r\n      if (borderColor.length > 0) ret.push({key:'borderColor', value:borderColor});\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  this.toCamelCase = function(str) {\r\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\r\n  }\r\n\r\n  // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0–255,0–255,0–255)\"\"\r\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\r\n  this.hsl2rgb = function(h,s,l) {\r\n    var a = s*Math.min(l,1-l);\r\n    var f = function(n) {\r\n      var k=(n+h/30)%12;\r\n      return Math.min(Math.floor((l - a*Math.max(Math.min(k-3,9-k,1),-1))*256),255);\r\n    }\r\n    return \"rgb(\"+f(0)+\",\"+f(8)+\",\"+f(4)+\")\";\r\n  }\r\n\r\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\r\n  this.parseColor = function(color) {\r\n    // e.g. `#fff` or `#ff0048`\r\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$', 'i');\r\n\r\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%) or rgba(0,125,250,0.8)\r\n    var rgbRegex = /^rgba?\\(\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?)(,\\s*\\d+(\\.\\d+)?)?\\)$/;\r\n\r\n    // e.g. hsl(300, 10%, 20%)\r\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\r\n\r\n    // e.g. \"white\" or \"red\"\r\n    var nameRegex = new RegExp('^[a-z]+$', 'i');\r\n\r\n    var decimalColors, decimalValue, hexString, ret=[];\r\n\r\n    if (haxRegex.test(color)) {\r\n      return color;\r\n    }\r\n\r\n    if (hslRegex.test(color)) {\r\n      // we want to convert to RGB\r\n      decimalColors = hslRegex.exec(color).slice(1);\r\n      // first value should be from 0 to 360\r\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0,-1) * 360 / 100;\r\n      else decimalValue = decimalColors[0]*1;\r\n      ret.push(decimalValue);\r\n      // next values should be % to convert to base 1\r\n      ret.push(decimalColors[2].slice(0,-1) / 100);\r\n      ret.push(decimalColors[4].slice(0,-1) / 100);\r\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\r\n      ret = [];\r\n    }\r\n    if (rgbRegex.test(color)) {\r\n      decimalColors = rgbRegex.exec(color).slice(1).filter(function(v,i) {\r\n        return i%2===0 && typeof v !== \"undefined\";\r\n      });\r\n\r\n      decimalColors.forEach(function(decimalValue, i) {\r\n        // for the alpha number\r\n        if (i === 3) {\r\n          hexString = Math.round(decimalValue.replace(\",\",\"\") * 255).toString(16);\r\n        } else {\r\n          // if it ends with '%', we calculcate based on 100%=255\r\n          if (decimalValue.endsWith('%')) {\r\n            decimalValue = Math.round(decimalValue.slice(0,-1) * 255 / 100);\r\n          } else decimalValue = decimalValue*1;\r\n          if (decimalValue > 255) {\r\n            decimalValue = 255;\r\n          }\r\n          hexString = '0' + decimalValue.toString(16);\r\n          hexString = hexString.slice(-2);\r\n        }\r\n        ret.push(hexString);\r\n      })\r\n      return '#' + ret.join('');\r\n    }\r\n    if (nameRegex.test(color)) return color;\r\n\r\n    console.error('Could not parse color \"' + color + '\"');\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em'/'in' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\r\n  this.convertToUnit = function(val) {\r\n    // if it's just a number, then return it\r\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val*1;\r\n    var mtch = (val+\"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm|in)$/);\r\n    // if we don't have a number with supported units, then return false\r\n    if (!mtch) return false;\r\n    val = mtch[1];\r\n    switch(mtch[3]) {\r\n      case 'px':{\r\n        val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\r\n        break;\r\n      }\r\n      case 'em':\r\n      case 'rem':{\r\n        val *= 12; // default font-size is 12pt\r\n        break;\r\n      }\r\n      case 'cm':{\r\n        val = Math.round(val * 28.34646); // 1cm => 28.34646\r\n        break;\r\n      }\r\n      case 'in':{\r\n        val *= 72; // 1in => 72 pt\r\n        break;\r\n      }\r\n    }\r\n    return val*1;\r\n  }\r\n\r\n  var result = this.convertHtml(htmlText);\r\n  // if we only pass a string without HTML code\r\n  if (typeof result === \"string\") result={text:result};\r\n  // if images by reference\r\n  if (this.imagesByReference) {\r\n    result = {content:result, images:{}};\r\n    this.imagesRef.forEach(function(src, i) {\r\n      // check if 'src' is a JSON string\r\n      result.images['img_ref_'+imagesByReferenceSuffix+i] = (src.startsWith(\"{\") ? JSON.parse(src) : src);\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = function(htmlText, options) {\r\n  return new htmlToPdfMake(htmlText, options);\r\n}\r\n"],"names":["htmlToPdfMake","htmlText","options","this","wndw","window","tableAutoSize","imagesByReference","removeExtraBlanks","showHidden","removeTagClasses","ignoreStyles","Array","isArray","imagesByReferenceSuffix","Math","random","toString","slice","fontSizes","defaultStyles","b","bold","strong","u","decoration","del","s","em","italics","i","h1","fontSize","marginBottom","h2","h3","h4","h5","h6","a","color","strike","p","margin","ul","marginLeft","table","th","fillColor","imagesRef","changeDefaultStyles","keyStyle","hasOwnProperty","k","ks","convertHtml","parser","DOMParser","replace","parsedHtml","parseFromString","docDef","parseElement","body","stack","text","element","parents","dataset","key","nodeName","toUpperCase","nodeNameLowerCase","toLowerCase","ret","_this","indexOf","nodeType","textContent","styleParentTextNode","parseStyle","length","hasWhiteSpace","findIndex","value","replaceText","applyStyle","style","display","visibility","id","push","childNodes","forEach","call","child","res","searchForStack","pop","rowIndex","tbodies","hasRowSpan","tbody","rows","row","cells","cell","colSpan","rowSpan","cellIndex","cs","len","colspan","splice","concat","cellsWidths","cellsHeights","tableWidths","tableHeights","fullWidth","getAttribute","includes","width","height","isNaN","cellWidth","type","cellHeight","map","w","widths","heights","pdfmake","charAt","JSON","parse","layout","e","console","error","svg","outerHTML","offset","styleHR","thickness","left","canvas","x1","y1","x2","y2","lineWidth","lineColor","start","listStyle","listStyleType","preserveLeadingSpaces","src","index","image","setLink","pointer","href","linkToDestination","link","customTag","params","cssClass","lastIndex","parent","parentIndex","parentNodeName","htmlClass","unshift","split","ignoreNonDescendentProperties","stringify","stl","borderValueRearrange","styleStr","styleArray","v1","v2","v3","v","match","ignoreProperties","convertToUnit","parseColor","size","min","max","parseInt","styleDefs","borders","styleDef","trim","val","toCamelCase","g","parsedValue","border","borderColor","properties","join","str","hsl2rgb","h","l","f","n","floor","decimalColors","decimalValue","hexString","haxRegex","RegExp","rgbRegex","hslRegex","nameRegex","test","exec","endsWith","filter","round","parseFloat","isFinite","mtch","result","content","images","startsWith","module","exports"],"sourceRoot":""}